{"version":3,"sources":["assets/icon-remove.svg","components/Header.jsx","components/Footer.jsx","components/FilterBox.jsx","components/FilterItem.jsx","components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","href","target","FilterBox","filterList","clearAllFilters","removeFilter","map","item","i","key","onClick","src","IconRemove","alt","FilterItem","languages","level","role","tools","addToFilter","language","tool","Card","jobDetails","company","contract","featured","location","logo","position","postedAt","new","App","filteredjobs","useState","setFilterList","e","includes","innerText","length","data","filter","job","filterArray","array1","array2","item1","item2","containsFilterItem","itemToRemove","newList","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be172ad9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-remove.ae67c678.svg\";","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>\r\n                Challenge by <a href=\"https://www.frontendmentor.io/challenges\" target=\"_blank\">Frontend Mentor</a>.\r\n                Coded by <a href=\"https://freedamoore.github.io/\">Freeda Moore</a>.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport './FilterBox.css';\r\nimport IconRemove from '../assets/icon-remove.svg';\r\n\r\nconst FilterBox = ({filterList, clearAllFilters, removeFilter}) => {\r\n    return (\r\n        <div className=\"filter-box\">\r\n            <div className=\"filter-box__items\">\r\n                {\r\n                    filterList.map((item, i) => \r\n                    <div key={i} className=\"filter-box__item-wrapper\" >\r\n                        <span  className=\"filter-box__item\">{item}</span>\r\n                        <span  className=\"filter-box__item-remove\" onClick={() => removeFilter({item})}><img src={IconRemove} alt=\"remove\"/></span>\r\n                    </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"filter-box__clear\">\r\n                <button className=\"filter-box__clear-btn\" onClick={clearAllFilters}>Clear</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterBox\r\n","import React from 'react';\r\nimport './FilterItem.css';\r\n\r\nconst FilterItem = ({languages, level, role, tools, addToFilter}) => {\r\n    return (\r\n        <div className=\"filter-items\">\r\n            {\r\n                languages &&\r\n                languages.map((language, i) => \r\n                    <span key={i} className=\"filter-item\" onClick={addToFilter}>{language}</span> \r\n                )\r\n            }\r\n            \r\n            <span className=\"filter-item\" onClick={addToFilter}>{level}</span>\r\n            <span className=\"filter-item\" onClick={addToFilter}>{role}</span>\r\n            {\r\n                tools &&\r\n                tools.map((tool, i) => \r\n                    <span key={i} className=\"filter-item\" onClick={addToFilter}>{tool}</span>\r\n                )\r\n                \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterItem\r\n","import React from 'react';\r\nimport './Card.css';\r\nimport FilterItem from './FilterItem';\r\n\r\nconst Card = ({ jobDetails, addToFilter }) => {\r\n    const {\r\n        company,\r\n        contract,\r\n        featured,\r\n        languages,\r\n        level,\r\n        location,\r\n        logo,\r\n        position,\r\n        postedAt,\r\n        role,\r\n        tools\r\n    } = jobDetails;\r\n\r\n    return (\r\n        <div className=\"job-card\">\r\n            <div className=\"job-card__content\">\r\n                <div className=\"job-card__logo\">\r\n                    <img src={logo}  alt=\"Company Logo\" />\r\n                </div>\r\n                <div className=\"job-card__details\">\r\n                    <div className=\"job-card__company\">\r\n                        <h4>{company}</h4>\r\n                        {\r\n                            jobDetails.new ?\r\n                                <span className=\"job-card__badge job-card__badge--new\">NEW!</span>\r\n                                : null\r\n                        }\r\n                        {\r\n                            featured ?\r\n                                <span className=\"job-card__badge job-card__badge--featured\">FEATURED</span>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    <a href=\"#\" className=\"job-card__title\">{position}</a>\r\n                    <div className=\"job-card__info\">\r\n                        <span>{postedAt} - {contract} - {location}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"job-card__filters\">\r\n                    <FilterItem languages={languages} level={level} role= {role} tools={tools} addToFilter={addToFilter}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport FilterBox from './components/FilterBox';\nimport Card from './components/Card';\nimport './App.css';\nimport data from './data/data.json';\n\n\nfunction App() {\n\n  const [filterList, setFilterList] = useState([]);\n\n  const addToFilter = (e) => {\n    if(!filterList.includes(e.target.innerText)){\n      setFilterList([...filterList, e.target.innerText]);\n    }\n  }\n\n  const removeFilter = (itemToRemove) => {\n    const newList = filterList.filter(item => item !== itemToRemove.item)\n    setFilterList(newList);\n  }\n\n  const clearAllFilters = () => setFilterList([]);\n  \n  const containsFilterItem = (filterArray, array1, array2, item1, item2) => {\n    for (let i = 0; i < filterArray.length; i++)\n      if (array1.includes(filterArray[i]) || array2.includes(filterArray[i]) || item1 === filterArray[i] || item2 === filterArray[i]) {\n        return true;\n      }\n  }\n\n  //if there are no filters, show all jobs otherwise show filtered jobs\n  let filteredjobs;\n  if (filterList.length) {\n    filteredjobs = data.filter(job => containsFilterItem(filterList, job.languages, job.tools, job.level, job.role));\n  } else {\n    filteredjobs = data;\n  }\n\n  // console.log(filterList);\n  // console.log(filteredjobs);\n\n  return (\n    < div className=\"App\" >\n      <Header />\n      {\n        filterList.length ? <FilterBox filterList={filterList} clearAllFilters={clearAllFilters} removeFilter={removeFilter} /> : null\n      }\n     \n      {\n        filteredjobs.map(item => (\n          <Card key={item.id} jobDetails={item} addToFilter={addToFilter} />\n        ))\n      }\n      <Footer />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}